"use strict";(self.webpackChunkpatchouli_docs=self.webpackChunkpatchouli_docs||[]).push([[680],{3905:function(e,t,a){a.d(t,{Zo:function(){return u},kt:function(){return v}});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(a),d=i,v=c["".concat(s,".").concat(d)]||c[d]||m[d]||r;return a?n.createElement(v,l(l({ref:t},u),{},{components:a})):n.createElement(v,l({ref:t},u))}));function v(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},6010:function(e,t,a){a.r(t),a.d(t,{assets:function(){return s},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return r},metadata:function(){return o},toc:function(){return p}});var n=a(3117),i=(a(7294),a(3905));const r={},l="Template Variable Usage",o={unversionedId:"patchouli-advanced/template-variable-usage",id:"patchouli-advanced/template-variable-usage",title:"Template Variable Usage",description:"As explained in Using Templates, variables can be used",source:"@site/docs/patchouli-advanced/template-variable-usage.md",sourceDirName:"patchouli-advanced",slug:"/patchouli-advanced/template-variable-usage",permalink:"/Patchouli/docs/patchouli-advanced/template-variable-usage",draft:!1,editUrl:"https://github.com/VazkiiMods/Patchouli/edit/1.18.x/web/docs/patchouli-advanced/template-variable-usage.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Template Nesting",permalink:"/Patchouli/docs/patchouli-advanced/template-nesting"},next:{title:"Overview",permalink:"/Patchouli/docs/reference/overview"}},s={},p=[{value:"Inline Variables",id:"inline-variables",level:2},{value:"String Derivation",id:"string-derivation",level:2}],u={toc:p},c="wrapper";function m(e){let{components:t,...a}=e;return(0,i.kt)(c,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"template-variable-usage"},"Template Variable Usage"),(0,i.kt)("p",null,"As explained in ",(0,i.kt)("a",{parentName:"p",href:"/docs/patchouli-basics/templates"},"Using Templates"),", variables can be used\nto pass data in from the entry files into the template render."),(0,i.kt)("p",null,"If you're not familiar with templates or using variables therein, please read the Using\nTemplates page first, as thus page describes more complex use cases. Note that this page\napplies only to template design, and not in passing the variables in from the entry json."),(0,i.kt)("h2",{id:"inline-variables"},"Inline Variables"),(0,i.kt)("p",null,"Variables can be inlined into any strings in the template. You do this by wrapping the\nvariable name in #, as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "type": "text",\n    "text": "String interpolation with #inline_text# in the middle of the string!",\n    "x": 20,\n    "y": 30\n} \n')),(0,i.kt)("p",null,'Should you then define the variable "inline_text" in your entry json as such:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'    "inline_text": "anything you want"\n')),(0,i.kt)("p",null,"The text block you would see displayed ingame would be ",(0,i.kt)("em",{parentName:"p"},'"String interpolation with\nanything you want in the middle of the string!"'),". You can inline as many variables as you\nwant."),(0,i.kt)("h2",{id:"string-derivation"},"String Derivation"),(0,i.kt)("p",null,"Variables can have other data derived from them. For example, a variable you'd fill with\nan ",(0,i.kt)("a",{parentName:"p",href:"/docs/patchouli-advanced/itemstack-format"},"ItemStack String")," can be derived to get the\nitem's name."),(0,i.kt)("p",null,"Deriving variables can be done by applying a function onto them. To do so, you append\n",(0,i.kt)("inlineCode",{parentName:"p"},"->func"),' to the variable, replacing "func" with the function you want to apply. For\nexample, should "item" be a variable with an ItemStack String, to get its item name, you\'d\nuse ',(0,i.kt)("inlineCode",{parentName:"p"},"#item->iname"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Function List")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"iname"),": Apply to variables that contain ItemStack strings. Derives the item's display\nname."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"icount"),": Apply to variables that contain ItemStack strings. Derives the amount of\nitems in the stack."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"ename"),": Apply to variables that contain entity IDs. Derives the entity's display\nname."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"upper"),": Derives the variable's value, but in ",(0,i.kt)("em",{parentName:"li"},"UPPERCASE"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"lower"),": Derives the variable's value, but in ",(0,i.kt)("em",{parentName:"li"},"lowercase"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"trim"),": Derives the variable's value with all leading and trailing whitespace trimmed\nout."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"capital"),": Derives the variable's value, but in ",(0,i.kt)("em",{parentName:"li"},"First word only capital"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"fcapital"),": Derives the variable's value, but in ",(0,i.kt)("em",{parentName:"li"},"Fully Capitalized")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"exists"),': Derives "false" if the variable\'s value is an empty string, "true"\notherwise.'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"iexists"),': Derives "true" if the variable contains an ItemStack string with an\nexisting, non-empty stack, "false" otherwise.'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"inv"),': Derives "true" if the variable\'s value is "false" (case insensitive), "false"\notherwise.')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Other Points")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"You can derive variables that are used inline, so ",(0,i.kt)("inlineCode",{parentName:"li"},"This recipe produces #item->iname#."),"\nis valid."),(0,i.kt)("li",{parentName:"ul"},"You can derive multiple times, so ",(0,i.kt)("inlineCode",{parentName:"li"},"#item->iname->capital")," is valid."),(0,i.kt)("li",{parentName:"ul"},'The functions that derive to "true" and "false" can be used with the "guard" attribute\nin ',(0,i.kt)("a",{parentName:"li",href:"/docs/patchouli-advanced/default-components"},"template components"),".")))}m.isMDXComponent=!0}}]);